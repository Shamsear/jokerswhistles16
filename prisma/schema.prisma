// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  description String?
  phase       Int      @default(1) // 1: Registration, 2: Tasks, 3: Pool Matches, 4: Knockout Stage
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  players       Player[]
  matches       Match[]
  tasks         Task[]
  registrationLinks RegistrationLink[]

  @@map("tournaments")
}

model Player {
  id           String   @id @default(cuid())
  name         String
  email        String?  @unique
  isAdmin      Boolean  @default(false)
  pool         String?  // "A" or "B" for pool assignment
  tournamentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  homeMatches Match[] @relation("HomePlayer")
  awayMatches Match[] @relation("AwayPlayer")
  taskAssignments TaskAssignment[]
  spinResults SpinResult[]

  @@map("players")
}

model RegistrationLink {
  id           String   @id @default(cuid())
  token        String   @unique
  tournamentId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  expiresAt    DateTime?

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("registration_links")
}

model Match {
  id           String   @id @default(cuid())
  tournamentId String
  homePlayerId String
  awayPlayerId String
  round        Int      // 1-6 for pool rounds
  matchType    String   @default("pool") // "pool", "round_of_16", "quarter_final", "semi_final", "group_final", "mega_final"
  pool         String?  // "A" or "B" for pool/knockout matches, null for mega final
  knockoutStage String?  // "round_of_16", "quarter_final", "semi_final", "group_final", "mega_final"
  homeScore    Int?
  awayScore    Int?
  status       String   @default("pending") // pending, completed
  winnerId     String?  // ID of the winning player
  absentStatus String?  // null, "home_absent", "away_absent", "both_absent"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  homePlayer Player     @relation("HomePlayer", fields: [homePlayerId], references: [id])
  awayPlayer Player     @relation("AwayPlayer", fields: [awayPlayerId], references: [id])
  
  taskAssignments TaskAssignment[]
  spinResults     SpinResult[]
  matchTasks      MatchTask[]

  @@unique([homePlayerId, awayPlayerId])
  @@map("matches")
}

model Task {
  id              String   @id @default(cuid())
  name            String   // Name of the task (e.g., "Scoring Challenge")
  homeDescription String   // What the home player must do
  awayDescription String   // What the away player must do
  tournamentId    String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  taskAssignments TaskAssignment[]
  matchTasks      MatchTask[]

  @@map("tasks")
}

model TaskAssignment {
  id       String @id @default(cuid())
  matchId  String
  playerId String
  taskId   String
  round    Int
  createdAt DateTime @default(now())

  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([matchId, playerId, round])
  @@map("task_assignments")
}

model SpinResult {
  id        String   @id @default(cuid())
  matchId   String?
  playerId  String
  spinType  String   // "opponent_draw", "home_away", "task_assignment"
  result    String   // JSON string containing the spin result
  round     Int?
  videoUrl  String?  // URL to the shareable spin video
  createdAt DateTime @default(now())

  match  Match?  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("spin_results")
}

model MatchTask {
  id         String   @id @default(cuid())
  matchId    String
  taskId     String
  playerId   String   // Player who got this task
  playerType String   // "home" or "away"
  cardNumber Int?     // Which card they selected (1-8)
  createdAt  DateTime @default(now())

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([matchId, playerId])
  @@map("match_tasks")
}
